name: Compile sing-box Geosite win-update

on:
  schedule:
    - cron: '0 10 * * *'
  workflow_dispatch:

jobs:
  compile-geosite-win-update-srs:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v2

      - name: Install Necessary Tools
        run: |
          sudo apt install -y curl jq wget sed coreutils git

      - name: Install sing-box
        run: |
          sudo curl -fsSL https://sing-box.app/gpg.key -o /etc/apt/keyrings/sagernet.asc
          sudo chmod a+r /etc/apt/keyrings/sagernet.asc
          echo "deb [arch=$(dpkg --print-architecture) signed-by=/etc/apt/keyrings/sagernet.asc] https://deb.sagernet.org/ * *" | \
          sudo tee /etc/apt/sources.list.d/sagernet.list > /dev/null
          sudo apt-get update
          sudo apt-get install -y --allow-downgrades sing-box=1.8.14

      - name: Prepare Folders
        run: |
          git config --global user.name 'github-actions'
          git config --global user.email 'github-actions@github.com'
          sudo mkdir -p geosite geoip
          sudo chown -R $USER:$USER geosite geoip
          sudo chmod -R 755 geosite geoip

      - name: Download Text
        run: |
          wget -O win-update.txt https://raw.githubusercontent.com/Loyalsoldier/v2ray-rules-dat/release/win-update.txt
          wget -O telegram.txt https://raw.githubusercontent.com/Loyalsoldier/geoip/release/text/telegram.txt

      - name: Format Json
        run: |
          jq -n --rawfile domains win-update.txt '{"version": 1, "rules": [{"domain": ($domains | split("\n") | map(select(length > 0)))}]}' > win-update.json
          jq -n --rawfile ips telegram.txt '{"version": 1, "rules": [{"ip_cidr": ($ips | split("\n") | map(select(length > 0)))}]}' > telegram.json

      - name: Compile Source
        run: |
          sing-box rule-set compile --output geosite/geosite-win-update.srs win-update.json
          sing-box rule-set compile --output geoip/geoip-telegram.srs telegram.json

      - name: Push Files
        run: |
          echo "Force updating repository with local content..."
          git checkout -b Release
          git add geoip geosite
          git commit -m "Update Windows Update srs"
          git push --force origin Release
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        continue-on-error: true

      - name: Create tag
        id: create_tag
        run: |
          TAG_NAME=$(date -u +"%Y%m%d%H%M%S")
          if git rev-parse "$TAG_NAME" >/dev/null 2>&1; then
            echo "Tag $TAG_NAME already exists, deleting it from remote."
            git push --delete origin "$TAG_NAME"
            while git ls-remote --tags origin | grep -q "refs/tags/$TAG_NAME"; do
              echo "Waiting for tag $TAG_NAME to be deleted..."
              sleep 5
            done
          fi
          git tag $TAG_NAME
          git push --force origin $TAG_NAME
          echo "::set-output name=TAG_NAME::$TAG_NAME"

      - name: Create release
        id: create_release
        run: |
          TAG_NAME=${{ steps.create_tag.outputs.TAG_NAME }}
          RELEASE_ID=$(gh release view "$TAG_NAME" --json id --jq '.id' || echo "null")
          if [ "$RELEASE_ID" != "null" ]; then
            echo "Release $TAG_NAME already exists, deleting it."
            gh release delete "$TAG_NAME" --yes
          fi
          gh release create "$TAG_NAME" --title "$TAG_NAME" --notes "Auto-generated release for $TAG_NAME" geosite/*.srs geoip/*.srs
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
